services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: library_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: library_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: library_password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d library_management"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Library Management API
  api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: library_api
    restart: unless-stopped
    user: "1001:1001"  # Match the nodeuser UID/GID from Dockerfile
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development  # Changed to development for seeding
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: library_management
      DB_USER: postgres
      DB_PASSWORD: library_password
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      JWT_EXPIRES_IN: 24h
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./exports:/app/exports:rw
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional enhancement)
  redis:
    image: redis:7-alpine
    container_name: library_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: library_network 